1. 启动
	写好了一个服务端的js文件之后，要使用node运行，以此来启动服务

	打开cmd命令窗口，运行js文件
		node js文件 例如：node app.js

服务端node要遵循一个CommonJS
	1. 一个文件就是一个模块
	2. 每一个模块是的独立的，独立的作用域
	3. 使用模块，要使用require()引入模块
		a. 如果引入的是文件，必须相对或绝对路径
			例如：require('./tools.js')
		b. 使用安装好的第三方模块，不需要写相对路径,自动会到项目根目录下的node_modules搜索
			例如：require('vue')

		注意：require返回值引入的那个模块中module.exports的值，默认是一个对象


	4. 暴露模块的API
		把要暴露的api放在module.exports上

	5. 模块的分类
		a. 一个文件是一个模块
		b. 一个文件夹是一个模块
			必须在这个文件夹中放入一个描述文件package.json
				在package.json有一个main这一项，规定了文件夹模块的入口js

		c. 内置模块，是node提供的
				require('http') http fs path queryString

		当使用require('http') 先看下一下内置有没有这个模块，如果有直接返回了。如果没有就找运行的js文件的目录下的node_modules文件夹下的模块

npm 模块管理器  https://www.npmjs.com/
	下载第三方模块，去npm上下载

	下载：npm install（i） <模块名字>
		安装之后，会在安装的目录下创建文件夹为node_modules
	卸载 : npm uninstall
	更新：npm updata

	项目的描述文件：npm init
		会在目录下生成一个package.json 

			dependencies:{
				依赖模块
			}
		一般拿到项目没有node_modules，因为这个目录会很大，先安装package.json 中依赖的模块
			npm i

express
	路由
	中间件
	模板引擎
		把数据和模板结合起来，形成填满数据的html结构，最后放在页面中渲染

		开发模式：
			不管那种开发模式，都是把数据和模板结合在一起，然后交给浏览器渲染

			1. 前端套模板
				a.好处：可以前后端分离，后端只提供接口
				b.不好：大量套页面的逻辑放在前端，可能会渲染的慢
			2. 后端套模板
				a. 好处： 请求的页面已经套好数据了，渲染你速度非常快
				b. 不好：前后职责划分不清晰

	在expres中使用模板引擎，推荐使用ejs

vue和react在服务端渲染
	ssr
	同构